What follows are sections of the most important information that we have gathered so far about the bug.        Make usage of the following information to suggest mutations of fixes:
## Info about the bug (bug report summary):
### Bug info:
Root cause in triggering tests:
 - org.jfree.chart.block.junit.BorderArrangementTests::testSizingWithWidthConstraint
   --> java.lang.IllegalArgumentException: Range(double, double): require lower (0.0) <= upper (-2.3000000000000007).

The bug is located at exactly these lines numbers: (the format is file-name#line-number# line-code):
org/jfree/chart/block/BorderArrangement.java#455#                    new Range(0.0, constraint.getWidth() - w[2]),

The following is the list of buggy methods:
org.jfree.chart.block.BorderArrangement.arrangeFF(Lorg/jfree/chart/block/BlockContainer;Ljava/awt/Graphics2D;Lorg/jfree/chart/block/RectangleConstraint;)Lorg/jfree/chart/util/Size2D;,1

### Test cases results:
There are 1 failing test cases, here is the full log of failing cases:
--- org.jfree.chart.block.junit.BorderArrangementTests::testSizingWithWidthConstraint
java.lang.IllegalArgumentException: Range(double, double): require lower (0.0) <= upper (-2.3000000000000007).
	at org.jfree.chart.block.junit.BorderArrangementTests.testSizingWithWidthConstraint(BorderArrangementTests.java:560)
### The code of the failing test cases:
Extracting test code from file org/jfree/chart/block/junit/BorderArrangementTests.java returned: Command extract_test_code returned a lengthy response, we truncated it to the first 4000 characters: public void testSizingWithWidthConstraint() {
        RectangleConstraint constraint = new RectangleConstraint(
            10.0, new Range(10.0, 10.0), LengthConstraintType.FIXED,
            0.0, new Range(0.0, 0.0), LengthConstraintType.NONE
        );
                
        BlockContainer container = new BlockContainer(new BorderArrangement());
        BufferedImage image = new BufferedImage(
            200, 100, BufferedImage.TYPE_INT_RGB
        );
        Graphics2D g2 = image.createGraphics();
        
        // TBLRC
        // 00001 - center item only
        container.add(new EmptyBlock(5.0, 6.0));
        Size2D size = container.arrange(g2, constraint);
        assertEquals(10.0, size.width, EPSILON);
        assertEquals(6.0, size.height, EPSILON);
        
        container.clear();
        container.add(new EmptyBlock(15.0, 16.0));
        size = container.arrange(g2, constraint);
        assertEquals(10.0, size.width, EPSILON);
        assertEquals(16.0, size.height, EPSILON);

        // TBLRC
        // 00010 - right item only
        container.clear();
        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.RIGHT);
        size = container.arrange(g2, constraint);
        assertEquals(10.0, size.width, EPSILON);
        assertEquals(45.6, size.height, EPSILON);
        
        // TBLRC
        // 00011 - right and center items
        container.clear();
        container.add(new EmptyBlock(7.0, 20.0));
        container.add(new EmptyBlock(8.0, 45.6), RectangleEdge.RIGHT);
        size = container.arrange(g2, constraint);
        assertEquals(10.0, size.width, EPSILON);
        assertEquals(45.6, size.height, EPSILON);
        
        // TBLRC
        // 00100 - left item only
        container.clear();
        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT);
        size = container.arrange(g2, constraint);
        assertEquals(10.0, size.width, EPSILON);
        assertEquals(45.6, size.height, EPSILON);
        
        // TBLRC
        // 00101 - left and center items
        container.clear();
        container.add(new EmptyBlock(10.0, 20.0));
        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT);
        size = container.arrange(g2, constraint);
        assertEquals(10.0, size.width, EPSILON);
        assertEquals(45.6, size.height, EPSILON);
        
        // TBLRC
        // 00110 - left and right items
        container.clear();
        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.RIGHT);
        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT);
        size = container.arrange(g2, constraint);
        assertEquals(10.0, size.width, EPSILON);
        assertEquals(45.6, size.height, EPSILON);
        
        // TBLRC
        // 00111 - left, right and center items
        container.clear();
        container.add(new EmptyBlock(10.0, 20.0));
        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT);
        container.add(new EmptyBlock(5.4, 3.2), RectangleEdge.RIGHT);
        size = container.arrange(g2, constraint);
        assertEquals(10.0, size.width, EPSILON);
        assertEquals(45.6, size.height, EPSILON);
        
        // TBLRC
        // 01000 - bottom item only
        container.clear();
        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);
        size = container.arrange(g2, constraint);
        assertEquals(10.0, size.width, EPSILON);
        assertEquals(45.6, size.height, EPSILON);
        
        // TBLRC
        // 01001 - bottom and center only
        container.clear();
        container.add(new EmptyBlock(10.0, 20.0));
        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);
        size = container.arrange(g2, constraint);
        assertEquals(10.0, size.width, EPSILON);
        assertEquals(65.6, size.height, EPSILON);
        
        // TBLRC
        // 01010 - bottom and right only
        container.clear();
        container.add(new EmptyBlock(10.0, 20.0), 


## Read lines:
Lines 455 to 455 from file: org/jfree/chart/block/BorderArrangement.java
Command read_range returned: Line 455:                    new Range(0.0, constraint.getWidth() - w[2]),


Lines 1 to 100 from file: org/jfree/chart/axis/NumberAxis.java
Command read_range returned a lengthy response, we truncated it to the first 4000 characters: Line 1:/* ===========================================================
Line 2: * JFreeChart : a free chart library for the Java(tm) platform
Line 3: * ===========================================================
Line 4: *
Line 5: * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
Line 6: *
Line 7: * Project Info:  http://www.jfree.org/jfreechart/index.html
Line 8: *
Line 9: * This library is free software; you can redistribute it and/or modify it 
Line 10: * under the terms of the GNU Lesser General Public License as published by 
Line 11: * the Free Software Foundation; either version 2.1 of the License, or 
Line 12: * (at your option) any later version.
Line 13: *
Line 14: * This library is distributed in the hope that it will be useful, but 
Line 15: * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
Line 16: * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
Line 17: * License for more details.
Line 18: *
Line 19: * You should have received a copy of the GNU Lesser General Public
Line 20: * License along with this library; if not, write to the Free Software
Line 21: * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
Line 22: * USA.  
Line 23: *
Line 24: * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
Line 25: * in the United States and other countries.]
Line 26: *
Line 27: * ---------------
Line 28: * NumberAxis.java
Line 29: * ---------------
Line 30: * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
Line 31: *
Line 32: * Original Author:  David Gilbert (for Object Refinery Limited);
Line 33: * Contributor(s):   Laurence Vanhelsuwe;
Line 34: *
Line 35: * Changes (from 18-Sep-2001)
Line 36: * --------------------------
Line 37: * 18-Sep-2001 : Added standard header and fixed DOS encoding problem (DG);
Line 38: * 22-Sep-2001 : Changed setMinimumAxisValue() and setMaximumAxisValue() so 
Line 39: *               that they clear the autoRange flag (DG);
Line 40: * 27-Nov-2001 : Removed old, redundant code (DG);
Line 41: * 30-Nov-2001 : Added accessor methods for the standard tick units (DG);
Line 42: * 08-Jan-2002 : Added setAxisRange() method (since renamed setRange()) (DG);
Line 43: * 16-Jan-2002 : Added setTickUnit() method.  Extended ValueAxis to support an 
Line 44: *               optional cross-hair (DG);
Line 45: * 08-Feb-2002 : Fixes bug to ensure the autorange is recalculated if the
Line 46: *               setAutoRangeIncludesZero flag is changed (DG);
Line 47: * 25-Feb-2002 : Added a new flag autoRangeStickyZero to provide further 
Line 48: *               control over margins in the auto-range mechanism.  Updated 
Line 49: *               constructors.  Updated import statements.  Moved the 
Line 50: *               createStandardTickUnits() method to the TickUnits class (DG);
Line 51: * 19-Apr-2002 : Updated Javadoc comments (DG);
Line 52: * 01-May-2002 : Updated for changes to TickUnit class, removed valueToString()
Line 53: *               method (DG);
Line 54: * 25-Jul-2002 : Moved the lower and upper margin attributes, and the
Line 55: *               auto-range minimum size, up one level to the ValueAxis 
Line 56: *               class (DG);
Line 57: * 05-Sep-2002 : Updated constructor to match changes in Axis class (DG);
Line 58: * 01-Oct-2002 : Fixed errors reported by Checkstyle (DG);
Line 59: * 04-Oct-2002 : Moved standardTickUnits from NumberAxis --> ValueAxis (DG);
Line 60: * 24-Oct-2002 : Added a number format override (DG);
Line 61: * 08-Nov-2002 : Moved to new package com.jrefinery.chart.axis (DG);
Line 62: * 19-Nov-2002 : Removed grid settings (now controlled by the plot) (DG);
Line 63: * 14-Jan-2003 : Changed autoRangeMinimumSize from Number --> double, and moved
Line 64: *               crosshair settings to the plot classes (DG);
Line 65: * 20-Jan-2003 : Removed the monolithic constructor (DG);
Line 66: * 26-Mar-2003 : Implemented Serializable (DG);
Line


## The list of emplementations of some methods in the code base:
Command extract_method_code returned a lengthy response, we truncated it to the first 4000 characters: We found the following implementations for the method name testSizingWithWidthConstraint (we give the body of the method):
### Implementation candidate 0:
    public void testSizingWithWidthConstraint() {
        RectangleConstraint constraint = new RectangleConstraint(
            10.0, new Range(10.0, 10.0), LengthConstraintType.FIXED,
            0.0, new Range(0.0, 0.0), LengthConstraintType.NONE
        );
                
        BlockContainer container = new BlockContainer(new BorderArrangement());
        BufferedImage image = new BufferedImage(
            200, 100, BufferedImage.TYPE_INT_RGB
        );
        Graphics2D g2 = image.createGraphics();
        
        // TBLRC
        // 00001 - center item only
        container.add(new EmptyBlock(5.0, 6.0));
        Size2D size = container.arrange(g2, constraint);
        assertEquals(10.0, size.width, EPSILON);
        assertEquals(6.0, size.height, EPSILON);
        
        container.clear();
        container.add(new EmptyBlock(15.0, 16.0));
        size = container.arrange(g2, constraint);
        assertEquals(10.0, size.width, EPSILON);
        assertEquals(16.0, size.height, EPSILON);

        // TBLRC
        // 00010 - right item only
        container.clear();
        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.RIGHT);
        size = container.arrange(g2, constraint);
        assertEquals(10.0, size.width, EPSILON);
        assertEquals(45.6, size.height, EPSILON);
        
        // TBLRC
        // 00011 - right and center items
        container.clear();
        container.add(new EmptyBlock(7.0, 20.0));
        container.add(new EmptyBlock(8.0, 45.6), RectangleEdge.RIGHT);
        size = container.arrange(g2, constraint);
        assertEquals(10.0, size.width, EPSILON);
        assertEquals(45.6, size.height, EPSILON);
        
        // TBLRC
        // 00100 - left item only
        container.clear();
        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT);
        size = container.arrange(g2, constraint);
        assertEquals(10.0, size.width, EPSILON);
        assertEquals(45.6, size.height, EPSILON);
        
        // TBLRC
        // 00101 - left and center items
        container.clear();
        container.add(new EmptyBlock(10.0, 20.0));
        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT);
        size = container.arrange(g2, constraint);
        assertEquals(10.0, size.width, EPSILON);
        assertEquals(45.6, size.height, EPSILON);
        
        // TBLRC
        // 00110 - left and right items
        container.clear();
        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.RIGHT);
        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT);
        size = container.arrange(g2, constraint);
        assertEquals(10.0, size.width, EPSILON);
        assertEquals(45.6, size.height, EPSILON);
        
        // TBLRC
        // 00111 - left, right and center items
        container.clear();
        container.add(new EmptyBlock(10.0, 20.0));
        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT);
        container.add(new EmptyBlock(5.4, 3.2), RectangleEdge.RIGHT);
        size = container.arrange(g2, constraint);
        assertEquals(10.0, size.width, EPSILON);
        assertEquals(45.6, size.height, EPSILON);
        
        // TBLRC
        // 01000 - bottom item only
        container.clear();
        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);
        size = container.arrange(g2, constraint);
        assertEquals(10.0, size.width, EPSILON);
        assertEquals(45.6, size.height, EPSILON);
        
        // TBLRC
        // 01001 - bottom and center only
        container.clear();
        container.add(new EmptyBlock(10.0, 20.0));
        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);
        size = container.arrange(g2, constraint);
        assertEquals(10.0, size.width, EPSILON);
        assertEquals(65.6, size.hei

## Functions calls extracted based on snippets of code and target files:
Code snippet: getRangeType
target file: /workspaces/RepairAgent/repair_agent/auto_gpt_workspace/chart_13_buggy/source/org/jfree/chart/axis/NumberAxis.java
similar functions calls that were found:
Command extract_similar_functions_calls returned: Error: expected string or bytes-like object


## Executed search queries within the code base:
Searching keywords: ['Range', 'constraint.getWidth'], returned the following results:
Command search_code_base returned a lengthy response, we truncated it to the first 4000 characters: The following matches were found:
{'/workspaces/RepairAgent/repair_agent/auto_gpt_workspace/chart_13_buggy/swt/org/jfree/experimental/chart/swt/ChartComposite.java': {'ChartComposite': {'zoomInRange': ['range', 'range'], 'zoomOutRange': ['range', 'range'], 'restoreAutoRangeBounds': ['range', 'range']}}, '/workspaces/RepairAgent/repair_agent/auto_gpt_workspace/chart_13_buggy/swt/org/jfree/experimental/chart/swt/editor/SWTNumberAxisEditor.java': {'SWTNumberAxisEditor': {'toggleAutoRange': ['range', 'range']}}, '/workspaces/RepairAgent/repair_agent/auto_gpt_workspace/chart_13_buggy/source/org/jfree/chart/ChartPanel.java': {'ChartPanel': {'isRangeZoomable': ['range', 'range'], 'setRangeZoomable': ['range', 'range'], 'zoomInRange': ['range', 'range'], 'zoomOutRange': ['range', 'range'], 'restoreAutoRangeBounds': ['range', 'range']}}, '/workspaces/RepairAgent/repair_agent/auto_gpt_workspace/chart_13_buggy/source/org/jfree/chart/axis/ModuloAxis.java': {'ModuloAxis': {'setDisplayRange': ['range', 'range'], 'autoAdjustRange': ['range', 'range'], 'mapValueToFixedRange': ['range', 'range'], 'resizeRange': ['range', 'range']}}, '/workspaces/RepairAgent/repair_agent/auto_gpt_workspace/chart_13_buggy/source/org/jfree/chart/axis/LogarithmicAxis.java': {'LogarithmicAxis': {'setAutoRangeNextLogFlag': ['range', 'range'], 'getAutoRangeNextLogFlag': ['range', 'range'], 'setRange': ['range', 'range'], 'autoAdjustRange': ['range', 'range'], 'zoomRange': ['range', 'range']}}, '/workspaces/RepairAgent/repair_agent/auto_gpt_workspace/chart_13_buggy/source/org/jfree/chart/axis/CategoryLabelPosition.java': {'CategoryLabelPosition': {'getWidthType': ['getwidth'], 'getWidthRatio': ['getwidth']}}, '/workspaces/RepairAgent/repair_agent/auto_gpt_workspace/chart_13_buggy/source/org/jfree/chart/axis/CyclicNumberAxis.java': {'CyclicNumberAxis': {'centerRange': ['range', 'range'], 'setAutoRangeMinimumSize': ['range', 'range'], 'setFixedAutoRange': ['range', 'range'], 'setRange': ['range', 'range']}}, '/workspaces/RepairAgent/repair_agent/auto_gpt_workspace/chart_13_buggy/source/org/jfree/chart/axis/NumberAxis.java': {'NumberAxis': {'getRangeType': ['range', 'range'], 'setRangeType': ['range', 'range'], 'getAutoRangeIncludesZero': ['range', 'range'], 'setAutoRangeIncludesZero': ['range', 'range'], 'getAutoRangeStickyZero': ['range', 'range'], 'setAutoRangeStickyZero': ['range', 'range'], 'autoAdjustRange': ['range', 'range']}}, '/workspaces/RepairAgent/repair_agent/auto_gpt_workspace/chart_13_buggy/source/org/jfree/chart/axis/SymbolAxis.java': {'SymbolAxis': {'autoAdjustRange': ['range', 'range']}}, '/workspaces/RepairAgent/repair_agent/auto_gpt_workspace/chart_13_buggy/source/org/jfree/chart/axis/SegmentedTimeline.java': {'SegmentedTimeline': {'containsDomainRange': ['range', 'range']}}, '/workspaces/RepairAgent/repair_agent/auto_gpt_workspace/chart_13_buggy/source/org/jfree/chart/axis/LogAxis.java': {'LogAxis': {'autoAdjustRange': ['range', 'range'], 'zoomRange': ['range', 'range']}}, '/workspaces/RepairAgent/repair_agent/auto_gpt_workspace/chart_13_buggy/source/org/jfree/chart/axis/DateAxis.java': {'DateAxis': {'setRange': ['range', 'range'], 'autoAdjustRange': ['range', 'range'], 'zoomRange': ['range', 'range']}, 'DefaultTimeline': {'containsDomainRange': ['range', 'range']}}, '/workspaces/RepairAgent/repair_agent/auto_gpt_workspace/chart_13_buggy/source/org/jfree/chart/axis/PeriodAxis.java': {'PeriodAxis': {'getAutoRangeTimePeriodClass': ['range', 'range'], 'setAutoRangeTimePeriodClass': ['range', 'range'], 'getRange': ['range', 'range'], 'setRange': ['range', 'range'], 'autoAdjustRange': ['range', 'range']}}, '/workspaces/RepairAgent/repair_agent/auto_gpt_workspace/chart_13_buggy/source/org/jfree/chart/axis/ValueAxis.java': {'ValueAxis': {'isAutoRange': ['range', 'range'], 'setAutoRange': ['range', 'range'], 'getAutoRangeMinimumSize': ['range', 'range'], 'setAutoRangeMinimumSize': ['range', 'range'], 'getDefaultAutoRange': ['range', 'range'], 'setDefaultAut


## The format of the fix
This is the description of the json format in which you should write your fixes (respect this format when calling the commands write_fix and try_fixes):
The provided format is a list of dictionaries, each representing a set of edits to a specific file. Each dictionary contains the following keys:
    "file_name": A string indicating the path or name of the file to be modified.
    "insertions": A list of dictionaries representing insertions in the file. Each insertion dictionary includes:
        "line_number": An integer indicating the line number where the insertion should occur.
        "new_lines": A list of strings representing the new lines to be inserted.
    "deletions": A list of integers representing line numbers to be deleted from the file.
    "modifications": A list of dictionaries representing modifications in the file. Each modification dictionary includes:
        "line_number": An integer indicating the line number to be modified.
        "modified_line": A string representing the modified content for that line.
Here is an example:
[
    # changes in file 1
    {
        "file_name": "org/jfree/data/time/Week.java",
        "insertions": [
            {
                "line_number": 175,
                "new_lines": [
                    "    // ... new lines to insert ...\n",
                    "    // ... more new lines ...\n"
                ]
            },
            {
                "line_number": 180,
                "new_lines": [
                    "    // ... additional new lines ...\n"
                ]
            }
        ],
        "deletions": [179, 183],
        "modifications": [
            {
                "line_number": 179,
                "modified_line": "    if (dataset == null) {\n"
            },
            {
                "line_number": 185,
                "modified_line": "    int seriesCount = dataset.getColumnCount();\n"
            }
        ]
    },
    # changes in file 2
    {
        "file_name": "org/jfree/data/time/Day.java",
        "insertions": [],
        "deletions": [],
        "modifications": [
            {
                "line_number": 203,
                "modified_line": "    days = 0\n"
            },
            {
                "line_number": 307,
                "modified_line": "    super()\n"
            }
        ]
    }
]Here are some hints that might help you in suggesting good mutations:
1: Think of mutating comparison operators in a condition, e.g, < to >= and == to !=... Consider all possibilities and combinations even == to >, != to <= ...for example.
    Original: if x < 10:
    Fix: if x >= 10:
- 2: Think of replacing variables with explicit values (when possible) or with close variable names
    Original: result = add(x, y)
    Fix: result = add(5, 8)
    
    Original: mult = y + 1
    Fix:  add = z + 1
- 3: Consider changing some tokens partially, e.g, minXXX to maxXXX startXXX to endXXX, vice versa and so on... (consider all possibilities)
    Original: start_elements_valid = True
    Fix: end_elements_valid = True
- 4: Think of making conditions more complex (by adding 'and' / 'or' operators and the corresponding part) or less complex (by removing some of 'and'/ 'or' parts)
    Original: if (x > 0 and y < 5):
    More complex condition: if (x > 0 and y < 5 and z == 10):
    Less complex condition: if (x > 0):
- 5: if your patch consists only of adding a comment or modifying a line into a comment, you should discard the patch and try to suggest mutation of the buggy line(s) of code instead
    Orginal: '// Modify the logic for finding wrap position and padding text here to address the bug'
    Fix: pos = findWrapperPosition(text, width, start);
- 6: in some cases you will be required to insert new lines of code, you should consider adding more lines at given location. Usually, the code around the insertion location give you an idea about the lines to insert. Also the type of assertion failure.
    Example:
     if (!Double.isNaN(v)) {
        min = Math.min(minimum, v);
+       max = Math.max(maximum, v); // insertion happened here
        }
    if (!Double.isNaN(u)) {
+       minimum = Math.min(min, u);// insertion happened here
        maximum = Math.max(max, u);
        }
- 7: pay attention to the comments and doc string above the buggy code, specifically if any important comments exist above or next to buggy lines.
    Example:
    // - verify the header checksum
    This comment indicates that a verification of the header checksum, which can be done by calling a method dedicated for that.
- 8: the usual fix of some null pointer exceptions is to add a condition on the variable(s) that can be null.
    Original: entity.create()
    Fix: if (entity != null){
        entity.create()
    }
- 9: Do not modify a file by replacing lines with a comment. If you want to delete a line you can add its number to the list of lines to delete.
Always suggest code and not comments only.
Example of forbidden fix because it only writes a comment and not actual code:
    {
        modifications: [{"line_number": 105, "modified_line": "// need to improve this code"}]
    }
- 10: Pay attention the type of variables. The code before and after the buggy lines might give hints of what the type of a variable should be.
Example:
    int x = 20;
    double y = x * x; // x should have been declared as double in the previous line
- 11: You also should be careful with types in java, especially numerical types.
For example int * int might produce a double which means it should be stored in double variable
Another example is int + int would also produce double.

- 12: If the buggy line is a method signature, consider changing the signature of the method. Also, consider checking similar methods or neighboring methods by searching the code base.
Examples:
    change private to public or protected and vice-versa
    change the type of an argument
    add or remove an argument

Your fix should target all the following lines by at least one edit type (modification, insertion, or deletion):
455 from file: org/jfree/chart/block/BorderArrangement.java

Task for assistant:  generate 30 mutants of the target buggy lines. Respect the fix format, only change values (never touch keys). For every mutant generate a full fix dictionary. Put the 30 mutants in a main list.To generate the list of your mutations, fillout the following template multiple time with different variants:
[{"file_name": "org/jfree/chart/block/BorderArrangement.java", "target_lines": [["455", "                    new Range(0.0, constraint.getWidth() - w[2]),"]], "insertions": [here put the list of insertion dictionaries. DO NOT REPEAT ALREADY EXISTING LINES!: {"line_numbe":..., "new_lines":[...]}, ...], "deletions": [here put the lines number to delete...], "modifications": [here put the list of modification dictionaries {"line_number":..., "modified_line":...}, ...]}]
